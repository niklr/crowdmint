/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProjectInterface extends ethers.utils.Interface {
  functions: {
    "contribute(address)": FunctionFragment;
    "contributions(uint256)": FunctionFragment;
    "contributors(address)": FunctionFragment;
    "getContribution(uint256)": FunctionFragment;
    "getInfo()": FunctionFragment;
    "info()": FunctionFragment;
    "manager()": FunctionFragment;
    "payout()": FunctionFragment;
    "refund()": FunctionFragment;
    "setInfo(string,string,string,string,uint256,uint256)": FunctionFragment;
    "totalContributions()": FunctionFragment;
    "totalContributors()": FunctionFragment;
    "totalFunding()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "contribute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setInfo",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFunding",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFunding",
    data: BytesLike
  ): Result;

  events: {
    "ContributionReceived(address,address,uint256)": EventFragment;
    "InfoUpdated(address,string,string)": EventFragment;
    "PayoutRequested(address,address,uint256)": EventFragment;
    "RefundRequested(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributionReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InfoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayoutRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundRequested"): EventFragment;
}

export type ContributionReceivedEvent = TypedEvent<
  [string, string, BigNumber] & {
    project: string;
    contributor: string;
    amount: BigNumber;
  }
>;

export type InfoUpdatedEvent = TypedEvent<
  [string, string, string] & { project: string; title: string; url: string }
>;

export type PayoutRequestedEvent = TypedEvent<
  [string, string, BigNumber] & {
    project: string;
    requestor: string;
    amount: BigNumber;
  }
>;

export type RefundRequestedEvent = TypedEvent<
  [string, string, BigNumber] & {
    project: string;
    requestor: string;
    amount: BigNumber;
  }
>;

export class Project extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProjectInterface;

  functions: {
    contribute(
      _contributor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contributor: string; amount: BigNumber }
    >;

    contributors(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getContribution(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          category: string;
          title: string;
          description: string;
          url: string;
          goal: BigNumber;
          created: BigNumber;
          deadline: BigNumber;
          creator: string;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ]
    >;

    info(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        category: string;
        title: string;
        description: string;
        url: string;
        goal: BigNumber;
        created: BigNumber;
        deadline: BigNumber;
        creator: string;
      }
    >;

    manager(overrides?: CallOverrides): Promise<[string]>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInfo(
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalContributions(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalContributors(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFunding(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  contribute(
    _contributor: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { contributor: string; amount: BigNumber }>;

  contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getContribution(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        category: string;
        title: string;
        description: string;
        url: string;
        goal: BigNumber;
        created: BigNumber;
        deadline: BigNumber;
        creator: string;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ]
  >;

  info(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      category: string;
      title: string;
      description: string;
      url: string;
      goal: BigNumber;
      created: BigNumber;
      deadline: BigNumber;
      creator: string;
    }
  >;

  manager(overrides?: CallOverrides): Promise<string>;

  payout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInfo(
    _category: string,
    _title: string,
    _description: string,
    _url: string,
    _goal: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

  totalContributors(overrides?: CallOverrides): Promise<BigNumber>;

  totalFunding(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    contribute(_contributor: string, overrides?: CallOverrides): Promise<void>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contributor: string; amount: BigNumber }
    >;

    contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getContribution(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          category: string;
          title: string;
          description: string;
          url: string;
          goal: BigNumber;
          created: BigNumber;
          deadline: BigNumber;
          creator: string;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ]
    >;

    info(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        category: string;
        title: string;
        description: string;
        url: string;
        goal: BigNumber;
        created: BigNumber;
        deadline: BigNumber;
        creator: string;
      }
    >;

    manager(overrides?: CallOverrides): Promise<string>;

    payout(overrides?: CallOverrides): Promise<void>;

    refund(overrides?: CallOverrides): Promise<void>;

    setInfo(
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    totalContributors(overrides?: CallOverrides): Promise<BigNumber>;

    totalFunding(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ContributionReceived(address,address,uint256)"(
      project?: string | null,
      contributor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { project: string; contributor: string; amount: BigNumber }
    >;

    ContributionReceived(
      project?: string | null,
      contributor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { project: string; contributor: string; amount: BigNumber }
    >;

    "InfoUpdated(address,string,string)"(
      project?: string | null,
      title?: null,
      url?: null
    ): TypedEventFilter<
      [string, string, string],
      { project: string; title: string; url: string }
    >;

    InfoUpdated(
      project?: string | null,
      title?: null,
      url?: null
    ): TypedEventFilter<
      [string, string, string],
      { project: string; title: string; url: string }
    >;

    "PayoutRequested(address,address,uint256)"(
      project?: string | null,
      requestor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { project: string; requestor: string; amount: BigNumber }
    >;

    PayoutRequested(
      project?: string | null,
      requestor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { project: string; requestor: string; amount: BigNumber }
    >;

    "RefundRequested(address,address,uint256)"(
      project?: string | null,
      requestor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { project: string; requestor: string; amount: BigNumber }
    >;

    RefundRequested(
      project?: string | null,
      requestor?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { project: string; requestor: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    contribute(
      _contributor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getContribution(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInfo(
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    totalContributors(overrides?: CallOverrides): Promise<BigNumber>;

    totalFunding(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    contribute(
      _contributor: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContribution(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInfo(
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalContributions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalContributors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProjectManagerInterface extends ethers.utils.Interface {
  functions: {
    "contribute(address)": FunctionFragment;
    "create(string,string,string,string,string,uint256,uint256)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "indexes(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "projects(uint256)": FunctionFragment;
    "setInfo(address,string,string,string,string,uint256,uint256)": FunctionFragment;
    "totalProjects()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "contribute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "indexes", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInfo",
    values: [string, string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalProjects",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalProjects",
    data: BytesLike
  ): Result;

  events: {
    "ProjectCreated(uint256,string,string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export type ProjectCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string] & {
    index: BigNumber;
    category: string;
    title: string;
    addr: string;
    creator: string;
  }
>;

export class ProjectManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProjectManagerInterface;

  functions: {
    contribute(
      _projectAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      _id: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    indexes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setInfo(
      _projectAddress: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalProjects(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  contribute(
    _projectAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    _id: string,
    _category: string,
    _title: string,
    _description: string,
    _url: string,
    _goal: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  indexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setInfo(
    _projectAddress: string,
    _category: string,
    _title: string,
    _description: string,
    _url: string,
    _goal: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalProjects(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    contribute(
      _projectAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      _id: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    indexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setInfo(
      _projectAddress: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalProjects(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ProjectCreated(uint256,string,string,address,address)"(
      index?: BigNumberish | null,
      category?: null,
      title?: null,
      addr?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        index: BigNumber;
        category: string;
        title: string;
        addr: string;
        creator: string;
      }
    >;

    ProjectCreated(
      index?: BigNumberish | null,
      category?: null,
      title?: null,
      addr?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        index: BigNumber;
        category: string;
        title: string;
        addr: string;
        creator: string;
      }
    >;
  };

  estimateGas: {
    contribute(
      _projectAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      _id: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    indexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setInfo(
      _projectAddress: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalProjects(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    contribute(
      _projectAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _id: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInfo(
      _projectAddress: string,
      _category: string,
      _title: string,
      _description: string,
      _url: string,
      _goal: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
